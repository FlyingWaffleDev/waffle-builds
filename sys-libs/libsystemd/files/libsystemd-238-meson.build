# SPDX-License-Identifier: LGPL-2.1+
#
# Copyright 2017 Zbigniew JÄ™drzejewski-Szmek
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <http://www.gnu.org/licenses/>.

project('systemd', 'c',
        version : '238',
        license : 'LGPLv2+',
        default_options: [
                'c_std=gnu99',
                'prefix=/usr',
                'sysconfdir=/etc',
                'localstatedir=/var',
        ],
        meson_version : '>= 0.41',
       )

libsystemd_version = '0.22.0'
libudev_version = '1.6.10'

support_url = get_option('support-url')

# We need the same data in three different formats, ugh!
# Also, for hysterical reasons, we use different variable
# names, sometimes. Not all variables are included in every
# set. Ugh, ugh, ugh!
conf = configuration_data()
conf.set_quoted('PACKAGE_STRING',  meson.project_name() + ' ' + meson.project_version())
conf.set_quoted('PACKAGE_VERSION', meson.project_version())

substs = configuration_data()
substs.set('PACKAGE_URL',          'https://www.freedesktop.org/wiki/Software/systemd')
substs.set('PACKAGE_VERSION',      meson.project_version())

m4_defines = []

#####################################################################

if get_option('split-usr') == 'auto'
        split_usr = run_command('test', '-L', '/bin').returncode() != 0
else
        split_usr = get_option('split-usr') == 'true'
endif
conf.set10('HAVE_SPLIT_USR', split_usr,
           description : '/usr/bin and /bin directories are separate')

if get_option('split-bin') == 'auto'
        split_bin = run_command('test', '-L', '/usr/sbin').returncode() != 0
else
        split_bin = get_option('split-bin') == 'true'
endif
conf.set10('HAVE_SPLIT_BIN', split_bin,
           description : 'bin and sbin directories are separate')

rootprefixdir = get_option('rootprefix')
# Unusual rootprefixdir values are used by some distros
# (see https://github.com/systemd/systemd/pull/7461).
rootprefix_default = split_usr ? '/' : '/usr'
if rootprefixdir == ''
        rootprefixdir = rootprefix_default
endif

# join_paths ignore the preceding arguments if an absolute component is
# encountered, so this should canonicalize various paths when they are
# absolute or relative.
prefixdir = get_option('prefix')
if not prefixdir.startswith('/')
        error('Prefix is not absolute: "@0@"'.format(prefixdir))
endif
bindir = join_paths(prefixdir, get_option('bindir'))
libdir = join_paths(prefixdir, get_option('libdir'))
sysconfdir = join_paths(prefixdir, get_option('sysconfdir'))
includedir = join_paths(prefixdir, get_option('includedir'))
datadir = join_paths(prefixdir, get_option('datadir'))
localstatedir = join_paths('/', get_option('localstatedir'))

rootbindir = join_paths(rootprefixdir, 'bin')
rootsbindir = join_paths(rootprefixdir, split_bin ? 'sbin' : 'bin')
rootlibexecdir = join_paths(rootprefixdir, 'lib/systemd')

rootlibdir = get_option('rootlibdir')
if rootlibdir == ''
        rootlibdir = join_paths(rootprefixdir, libdir.split('/')[-1])
endif

# Dirs of external packages
pkgconfigdatadir = join_paths(datadir, 'pkgconfig')
pkgconfiglibdir = join_paths(libdir, 'pkgconfig')
varlogdir = join_paths(localstatedir, 'log')

# Our own paths
pkgdatadir = join_paths(datadir, 'systemd')
pkgsysconfdir = join_paths(sysconfdir, 'systemd')
pkgincludedir = join_paths(includedir, 'systemd')
systemdstatedir = join_paths(localstatedir, 'lib/systemd')
randomseeddir = join_paths(localstatedir, 'lib/systemd')

docdir = get_option('docdir')
if docdir == ''
        docdir = join_paths(datadir, 'doc/systemd')
endif

dbuspolicydir = get_option('dbuspolicydir')
if dbuspolicydir == ''
        dbuspolicydir = join_paths(datadir, 'dbus-1/system.d')
endif

dbussessionservicedir = get_option('dbussessionservicedir')
if dbussessionservicedir == ''
        dbussessionservicedir = join_paths(datadir, 'dbus-1/services')
endif

dbussystemservicedir = get_option('dbussystemservicedir')
if dbussystemservicedir == ''
        dbussystemservicedir = join_paths(datadir, 'dbus-1/system-services')
endif

conf.set_quoted('PKGSYSCONFDIR',                              pkgsysconfdir)
conf.set_quoted('ROOTPREFIX',                                 rootprefixdir)
conf.set_quoted('LIBDIR',                                     libdir)
conf.set_quoted('ROOTLIBDIR',                                 rootlibdir)
conf.set_quoted('ROOTLIBEXECDIR',                             rootlibexecdir)

conf.set_quoted('ABS_BUILD_DIR',                              meson.build_root())
conf.set_quoted('ABS_SRC_DIR',                                meson.source_root())

substs.set('prefix',                                          prefixdir)
substs.set('exec_prefix',                                     prefixdir)
substs.set('libdir',                                          libdir)
substs.set('rootlibdir',                                      rootlibdir)
substs.set('includedir',                                      includedir)
substs.set('pkgsysconfdir',                                   pkgsysconfdir)
substs.set('bindir',                                          bindir)
substs.set('rootbindir',                                      rootbindir)
substs.set('rootlibexecdir',                                  rootlibexecdir)
substs.set('VARLOGDIR',                                       varlogdir)

#####################################################################

cc = meson.get_compiler('c')
pkgconfig = import('pkgconfig')
check_compilation_sh = find_program('tools/meson-check-compilation.sh')
meson_build_sh = find_program('tools/meson-build.sh')

if get_option('tests') != 'false'
        cxx = find_program('c++', required : false)
        if cxx.found()
                #  Used only for tests
                add_languages('cpp')
        endif
endif

foreach arg : ['-Wextra',
               '-Werror=undef',
               '-Wlogical-op',
               '-Wmissing-include-dirs',
               '-Wold-style-definition',
               '-Wpointer-arith',
               '-Winit-self',
               '-Wdeclaration-after-statement',
               '-Wfloat-equal',
               '-Wsuggest-attribute=noreturn',
               '-Werror=missing-prototypes',
               '-Werror=implicit-function-declaration',
               '-Werror=missing-declarations',
               '-Werror=return-type',
               '-Werror=incompatible-pointer-types',
               '-Werror=format=2',
               '-Wstrict-prototypes',
               '-Wredundant-decls',
               '-Wmissing-noreturn',
               '-Wimplicit-fallthrough=5',
               '-Wshadow',
               '-Wendif-labels',
               '-Wstrict-aliasing=2',
               '-Wwrite-strings',
               '-Werror=overflow',
               '-Wdate-time',
               '-Wnested-externs',
               '-ffast-math',
               '-fno-common',
               '-fdiagnostics-show-option',
               '-fno-strict-aliasing',
               '-fvisibility=hidden',
               '-fstack-protector',
               '-fstack-protector-strong',
               '--param=ssp-buffer-size=4',
              ]
        if cc.has_argument(arg)
                add_project_arguments(arg, language : 'c')
        endif
endforeach

# the oss-fuzz fuzzers are not built with -fPIE, so don't
# enable it when we are linking against them
if cc.has_argument('-fPIE')
        add_project_arguments('-fPIE', language : 'c')
endif

# "negative" arguments: gcc on purpose does not return an error for "-Wno-"
# arguments, just emits a warnings. So test for the "positive" version instead.
foreach arg : ['unused-parameter',
               'missing-field-initializers',
               'unused-result',
               'format-signedness',
               'error=nonnull', # work-around for gcc 7.1 turning this on on its own
              ]
        if cc.has_argument('-W' + arg)
                add_project_arguments('-Wno-' + arg, language : 'c')
        endif
endforeach

if cc.compiles('''
   #include <time.h>
   #include <inttypes.h>
   typedef uint64_t usec_t;
   usec_t now(clockid_t clock);
   int main(void) {
           struct timespec now;
           return 0;
   }
''', name : '-Werror=shadow with local shadowing')
        add_project_arguments('-Werror=shadow', language : 'c')
endif

if cc.get_id() == 'clang'
        foreach arg : ['-Wno-typedef-redefinition',
                       '-Wno-gnu-variable-sized-type-not-at-end',
                      ]
                if cc.has_argument(arg,
                                   name : '@0@ is supported'.format(arg))
                        add_project_arguments(arg, language : 'c')
                endif
        endforeach
endif

link_test_c = files('tools/meson-link-test.c')

# --as-needed and --no-undefined are provided by meson by default,
# run mesonconf to see what is enabled
foreach arg : ['-Wl,-z,relro',
               '-Wl,-z,now',
               '-pie',
              ]

        have = run_command(check_compilation_sh,
                           cc.cmd_array(), '-x', 'c', arg,
                           '-include', link_test_c).returncode() == 0
        message('Linking with @0@ supported: @1@'.format(arg, have ? 'yes' : 'no'))
        if have
                add_project_link_arguments(arg, language : 'c')
        endif
endforeach

# Check if various sanitizers are supported
sanitizers = []
foreach arg : ['address']

        have = run_command(check_compilation_sh,
                           cc.cmd_array(), '-x', 'c',
                           '-fsanitize=@0@'.format(arg),
                           '-include', link_test_c).returncode() == 0
        message('@0@ sanitizer supported: @1@'.format(arg, have ? 'yes' : 'no'))
        if have
                sanitizers += arg
        endif
endforeach

if get_option('buildtype') != 'debug'
        foreach arg : ['-ffunction-sections',
                       '-fdata-sections']
                if cc.has_argument(arg,
                                   name : '@0@ is supported'.format(arg))
                        add_project_arguments(arg, language : 'c')
                endif
        endforeach

        foreach arg : ['-Wl,--gc-sections']
                have = run_command(check_compilation_sh,
                                   cc.cmd_array(), '-x', 'c', arg,
                                   '-include', link_test_c).returncode() == 0
                message('Linking with @0@ supported: @1@'.format(arg, have ? 'yes' : 'no'))
                if have
                        add_project_link_arguments(arg, language : 'c')
                endif
        endforeach
endif

cpp = ' '.join(cc.cmd_array()) + ' -E'

#####################################################################
# compilation result tests

conf.set('_GNU_SOURCE', true)
conf.set('__SANE_USERSPACE_TYPES__', true)

conf.set('SIZEOF_PID_T', cc.sizeof('pid_t', prefix : '#include <sys/types.h>'))
conf.set('SIZEOF_UID_T', cc.sizeof('uid_t', prefix : '#include <sys/types.h>'))
conf.set('SIZEOF_GID_T', cc.sizeof('gid_t', prefix : '#include <sys/types.h>'))
conf.set('SIZEOF_DEV_T', cc.sizeof('dev_t', prefix : '#include <sys/types.h>'))
conf.set('SIZEOF_INO_T', cc.sizeof('ino_t', prefix : '#include <sys/types.h>'))
conf.set('SIZEOF_TIME_T', cc.sizeof('time_t', prefix : '#include <sys/time.h>'))
conf.set('SIZEOF_RLIM_T', cc.sizeof('rlim_t', prefix : '#include <sys/resource.h>'))

decl_headers = '''
#include <uchar.h>
#include <linux/ethtool.h>
#include <linux/fib_rules.h>
#include <linux/stat.h>
#include <sys/stat.h>
'''
# FIXME: key_serial_t is only defined in keyutils.h, this is bound to fail

foreach decl : ['char16_t',
                'char32_t',
                'key_serial_t',
                'struct ethtool_link_settings',
                'struct fib_rule_uid_range',
		'struct statx',
               ]

        # We get -1 if the size cannot be determined
        have = cc.sizeof(decl, prefix : decl_headers) > 0
        conf.set10('HAVE_' + decl.underscorify().to_upper(), have)
endforeach

foreach decl : [['IFLA_INET6_ADDR_GEN_MODE',         'linux/if_link.h'],
                ['IN6_ADDR_GEN_MODE_STABLE_PRIVACY', 'linux/if_link.h'],
                ['IFLA_VRF_TABLE',                   'linux/if_link.h'],
                ['IFLA_MACVLAN_FLAGS',               'linux/if_link.h'],
                ['IFLA_IPVLAN_FLAGS',                'linux/if_link.h'],
                ['IFLA_PHYS_PORT_ID',                'linux/if_link.h'],
                ['IFLA_BOND_AD_INFO',                'linux/if_link.h'],
                ['IFLA_VLAN_PROTOCOL',               'linux/if_link.h'],
                ['IFLA_VXLAN_REMCSUM_NOPARTIAL',     'linux/if_link.h'],
                ['IFLA_VXLAN_GPE',                   'linux/if_link.h'],
                ['IFLA_GENEVE_LABEL',                'linux/if_link.h'],
                # if_tunnel.h is buggy and cannot be included on its own
                ['IFLA_VTI_REMOTE',                  'linux/if_tunnel.h', '#include <net/if.h>'],
                ['IFLA_IPTUN_ENCAP_DPORT',           'linux/if_tunnel.h', '#include <net/if.h>'],
                ['IFLA_GRE_ENCAP_DPORT',             'linux/if_tunnel.h', '#include <net/if.h>'],
                ['IFLA_BRIDGE_VLAN_INFO',            'linux/if_bridge.h'],
                ['IFLA_BRPORT_PROXYARP',             'linux/if_link.h'],
                ['IFLA_BRPORT_LEARNING_SYNC',        'linux/if_link.h'],
                ['IFLA_BR_VLAN_DEFAULT_PVID',        'linux/if_link.h'],
                ['IPVLAN_F_PRIVATE',                 'linux/if_link.h'],
                ['NDA_IFINDEX',                      'linux/neighbour.h'],
                ['IFA_FLAGS',                        'linux/if_addr.h'],
                ['FRA_UID_RANGE',                    'linux/fib_rules.h'],
                ['LO_FLAGS_PARTSCAN',                'linux/loop.h'],
                ['VXCAN_INFO_PEER',                  'linux/can/vxcan.h'],
               ]
        prefix = decl.length() > 2 ? decl[2] : ''
        have = cc.has_header_symbol(decl[1], decl[0], prefix : prefix)
        conf.set10('HAVE_' + decl[0], have)
endforeach

foreach ident : ['secure_getenv', '__secure_getenv']
        conf.set10('HAVE_' + ident.to_upper(), cc.has_function(ident))
endforeach

foreach ident : [
        ['memfd_create',      '''#include <sys/mman.h>'''],
        ['gettid',            '''#include <sys/types.h>
                                 #include <unistd.h>'''],
        ['pivot_root',        '''#include <stdlib.h>
                                 #include <unistd.h>'''],     # no known header declares pivot_root
        ['name_to_handle_at', '''#include <sys/types.h>
                                 #include <sys/stat.h>
                                 #include <fcntl.h>'''],
        ['setns',             '''#include <sched.h>'''],
        ['renameat2',         '''#include <stdio.h>
                                 #include <fcntl.h>'''],
        ['kcmp',              '''#include <linux/kcmp.h>'''],
        ['keyctl',            '''#include <sys/types.h>
                                 #include <keyutils.h>'''],
        ['copy_file_range',   '''#include <sys/syscall.h>
                                 #include <unistd.h>'''],
        ['bpf',               '''#include <sys/syscall.h>
                                 #include <unistd.h>'''],
        ['statx',             '''#include <sys/types.h>
                                 #include <sys/stat.h>
                                 #include <unistd.h>'''],
        ['explicit_bzero' ,   '''#include <string.h>'''],
        ['reallocarray',      '''#include <malloc.h>'''],
]

        have = cc.has_function(ident[0], prefix : ident[1], args : '-D_GNU_SOURCE')
        conf.set10('HAVE_' + ident[0].to_upper(), have)
endforeach

if cc.has_function('getrandom', prefix : '''#include <sys/random.h>''', args : '-D_GNU_SOURCE')
        conf.set10('USE_SYS_RANDOM_H', true)
        conf.set10('HAVE_GETRANDOM', true)
else
        have = cc.has_function('getrandom', prefix : '''#include <linux/random.h>''')
        conf.set10('USE_SYS_RANDOM_H', false)
        conf.set10('HAVE_GETRANDOM', have)
endif

#####################################################################

sed = find_program('sed')
awk = find_program('awk')
m4 = find_program('m4')
stat = find_program('stat')
git = find_program('git', required : false)
env = find_program('env')

meson_make_symlink = meson.source_root() + '/tools/meson-make-symlink.sh'
mkdir_p = 'mkdir -p $DESTDIR/@0@'
test_efi_create_disk_sh = find_program('test/test-efi-create-disk.sh')
splash_bmp = files('test/splash.bmp')

# if -Dxxx-path option is found, use that. Otherwise, check in $PATH,
# /usr/sbin, /sbin, and fall back to the default from middle column.
progs = [['quotaon',    '/usr/sbin/quotaon'    ],
         ['quotacheck', '/usr/sbin/quotacheck' ],
         ['kill',       '/usr/bin/kill'        ],
         ['kmod',       '/usr/bin/kmod'        ],
         ['kexec',      '/usr/sbin/kexec'      ],
         ['sulogin',    '/usr/sbin/sulogin'    ],
         ['mount',      '/usr/bin/mount',      'MOUNT_PATH'],
         ['umount',     '/usr/bin/umount',     'UMOUNT_PATH'],
         ['loadkeys',   '/usr/bin/loadkeys',   'KBD_LOADKEYS'],
         ['setfont',    '/usr/bin/setfont',    'KBD_SETFONT'],
        ]
foreach prog : progs
        path = get_option(prog[0] + '-path')
        if path != ''
                message('Using @1@ for @0@'.format(prog[0], path))
        else
                exe = find_program(prog[0],
                                   '/usr/sbin/' + prog[0],
                                   '/sbin/' + prog[0],
                                   required: false)
                path = exe.found() ? exe.path() : prog[1]
        endif
        name = prog.length() > 2 ? prog[2] : prog[0].to_upper()
        conf.set_quoted(name, path)
        substs.set(name, path)
endforeach

if run_command('ln', '--relative', '--help').returncode() != 0
        error('ln does not support --relative (added in coreutils 8.16)')
endif

############################################################

gperf = find_program('gperf')

gperf_test_format = '''
#include <string.h>
const char * in_word_set(const char *, @0@);
@1@
'''
gperf_snippet_format = 'echo foo,bar | @0@ -L ANSI-C'
gperf_snippet = run_command('sh', '-c', gperf_snippet_format.format(gperf.path()))
gperf_test = gperf_test_format.format('size_t', gperf_snippet.stdout())
if cc.compiles(gperf_test)
        gperf_len_type = 'size_t'
else
        gperf_test = gperf_test_format.format('unsigned', gperf_snippet.stdout())
        if cc.compiles(gperf_test)
                gperf_len_type = 'unsigned'
        else
                error('unable to determine gperf len type')
        endif
endif
message('gperf len type is @0@'.format(gperf_len_type))
conf.set('GPERF_LEN_TYPE', gperf_len_type,
         description : 'The type of gperf "len" parameter')

############################################################

if not cc.has_header('sys/capability.h')
        error('POSIX caps headers not found')
endif
foreach header : ['crypt.h',
                  'linux/btrfs.h',
                  'linux/memfd.h',
                  'linux/vm_sockets.h',
                  'sys/auxv.h',
                  'valgrind/memcheck.h',
                  'valgrind/valgrind.h',
                 ]

        conf.set10('HAVE_' + header.underscorify().to_upper(),
                   cc.has_header(header))
endforeach

############################################################

system_uid_max = get_option('system-uid-max')
if system_uid_max == ''
        system_uid_max = run_command(
                awk,
                '/^\s*SYS_UID_MAX\s+/ { uid=$2 } END { print uid }',
                '/etc/login.defs').stdout().strip()
        if system_uid_max == ''
                system_uid_max = '999'
        endif
endif
system_uid_max = system_uid_max.to_int()
conf.set('SYSTEM_UID_MAX', system_uid_max)
substs.set('systemuidmax', system_uid_max)
message('maximum system UID is @0@'.format(system_uid_max))

system_gid_max = get_option('system-gid-max')
if system_gid_max == ''
        system_gid_max = run_command(
                awk,
                '/^\s*SYS_GID_MAX\s+/ { gid=$2 } END { print gid }',
                '/etc/login.defs').stdout().strip()
        if system_gid_max == ''
                system_gid_max = '999'
        endif
endif
system_gid_max = system_gid_max.to_int()
conf.set('SYSTEM_GID_MAX', system_gid_max)
substs.set('systemgidmax', system_gid_max)
message('maximum system GID is @0@'.format(system_gid_max))

dynamic_uid_min = get_option('dynamic-uid-min').to_int()
dynamic_uid_max = get_option('dynamic-uid-max').to_int()
conf.set('DYNAMIC_UID_MIN', dynamic_uid_min)
conf.set('DYNAMIC_UID_MAX', dynamic_uid_max)
substs.set('dynamicuidmin', dynamic_uid_min)
substs.set('dynamicuidmax', dynamic_uid_max)

container_uid_base_min = get_option('container-uid-base-min').to_int()
container_uid_base_max = get_option('container-uid-base-max').to_int()
conf.set('CONTAINER_UID_BASE_MIN', container_uid_base_min)
conf.set('CONTAINER_UID_BASE_MAX', container_uid_base_max)
substs.set('containeruidbasemin', container_uid_base_min)
substs.set('containeruidbasemax', container_uid_base_max)

nobody_user = get_option('nobody-user')
nobody_group = get_option('nobody-group')

getent_result = run_command('getent', 'passwd', '65534')
if getent_result.returncode() == 0
        name = getent_result.stdout().split(':')[0]
        if name != nobody_user
                message('WARNING:\n' +
                        '        The local user with the UID 65534 does not match the configured user name "@0@" of the nobody user (its name is @1@).\n'.format(nobody_user, name) +
                        '        Your build will result in an user table setup that is incompatible with the local system.')
        endif
endif
id_result = run_command('id', '-u', nobody_user)
if id_result.returncode() == 0
        id = id_result.stdout().to_int()
        if id != 65534
                message('WARNING:\n' +
                        '        The local user with the configured user name "@0@" of the nobody user does not have UID 65534 (it has @1@).\n'.format(nobody_user, id) +
                        '        Your build will result in an user table setup that is incompatible with the local system.')
        endif
endif

getent_result = run_command('getent', 'group', '65534')
if getent_result.returncode() == 0
        name = getent_result.stdout().split(':')[0]
        if name != nobody_group
                message('WARNING:\n' +
                        '        The local group with the GID 65534 does not match the configured group name "@0@" of the nobody group (its name is @1@).\n'.format(nobody_group, name) +
                        '        Your build will result in an group table setup that is incompatible with the local system.')
        endif
endif
id_result = run_command('id', '-g', nobody_group)
if id_result.returncode() == 0
        id = id_result.stdout().to_int()
        if id != 65534
                message('WARNING:\n' +
                        '        The local group with the configured group name "@0@" of the nobody group does not have UID 65534 (it has @1@).\n'.format(nobody_group, id) +
                        '        Your build will result in an group table setup that is incompatible with the local system.')
        endif
endif
if nobody_user != nobody_group and not (nobody_user == 'nobody' and nobody_group == 'nogroup')
        message('WARNING:\n' +
                '        The configured user name "@0@" and group name "@0@" of the nobody user/group are not equivalent.\n'.format(nobody_user, nobody_group) +
                '        Please re-check that both "nobody-user" and "nobody-group" options are correctly set.')
endif

conf.set_quoted('NOBODY_USER_NAME', nobody_user)
conf.set_quoted('NOBODY_GROUP_NAME', nobody_group)
substs.set('NOBODY_USER_NAME', nobody_user)
substs.set('NOBODY_GROUP_NAME', nobody_group)

tty_gid = get_option('tty-gid')
conf.set('TTY_GID', tty_gid)
substs.set('TTY_GID', tty_gid)

# Ensure provided GID argument is numeric, otherwise fallback to default assignment
if get_option('users-gid') != ''
        users_gid = get_option('users-gid').to_int()
else
        users_gid = '-'
endif
substs.set('USERS_GID', users_gid)

if get_option('adm-group')
        m4_defines += ['-DENABLE_ADM_GROUP']
endif

if get_option('wheel-group')
        m4_defines += ['-DENABLE_WHEEL_GROUP']
endif

substs.set('DEV_KVM_MODE', get_option('dev-kvm-mode'))
substs.set('GROUP_RENDER_MODE', get_option('group-render-mode'))

kill_user_processes = get_option('default-kill-user-processes')
conf.set10('KILL_USER_PROCESSES', kill_user_processes)
substs.set('KILL_USER_PROCESSES', kill_user_processes ? 'yes' : 'no')

dns_servers = get_option('dns-servers')
conf.set_quoted('DNS_SERVERS', dns_servers)
substs.set('DNS_SERVERS', dns_servers)

ntp_servers = get_option('ntp-servers')
conf.set_quoted('NTP_SERVERS', ntp_servers)
substs.set('NTP_SERVERS', ntp_servers)

conf.set_quoted('GETTEXT_PACKAGE', meson.project_name())

substs.set('SUSHELL', get_option('debug-shell'))
substs.set('DEBUGTTY', get_option('debug-tty'))

debug = get_option('debug')
enable_debug_hashmap = false
enable_debug_mmap_cache = false
if debug != ''
        foreach name : debug.split(',')
                if name == 'hashmap'
                        enable_debug_hashmap = true
                elif name == 'mmap-cache'
                        enable_debug_mmap_cache = true
                else
                        message('unknown debug option "@0@", ignoring'.format(name))
                endif
        endforeach
endif
conf.set10('ENABLE_DEBUG_HASHMAP', enable_debug_hashmap)
conf.set10('ENABLE_DEBUG_MMAP_CACHE', enable_debug_mmap_cache)

#####################################################################

threads = dependency('threads')
librt = cc.find_library('rt')
libm = cc.find_library('m')
libdl = cc.find_library('dl')

libcap = dependency('libcap', required : false)
if not libcap.found()
        # Compat with Ubuntu 14.04 which ships libcap w/o .pc file
        libcap = cc.find_library('cap')
endif

libmount = dependency('mount',
                      version : '>= 2.30',
                      required : true)

want_audit = get_option('audit')
if want_audit != 'false'
        libaudit = dependency('audit', required : want_audit == 'true')
        have = libaudit.found()
else
        have = false
        libaudit = []
endif
conf.set10('HAVE_AUDIT', have)

want_gcrypt = get_option('gcrypt')
if want_gcrypt != 'false'
        libgcrypt = cc.find_library('gcrypt', required : want_gcrypt == 'true')
        libgpg_error = cc.find_library('gpg-error', required : want_gcrypt == 'true')
        have = libgcrypt.found() and libgpg_error.found()
else
        have = false
endif
if not have
        # link to neither of the libs if one is not found
        libgcrypt = []
        libgpg_error = []
endif
conf.set10('HAVE_GCRYPT', have)

conf.set_quoted('FALLBACK_HOSTNAME', get_option('fallback-hostname'))
conf.set10('ENABLE_COMPAT_GATEWAY_HOSTNAME', get_option('compat-gateway-hostname'))

default_hierarchy = get_option('default-hierarchy')
conf.set_quoted('DEFAULT_HIERARCHY_NAME', default_hierarchy,
                description : 'default cgroup hierarchy as string')
if default_hierarchy == 'legacy'
        conf.set('DEFAULT_HIERARCHY', 'CGROUP_UNIFIED_NONE')
elif default_hierarchy == 'hybrid'
        conf.set('DEFAULT_HIERARCHY', 'CGROUP_UNIFIED_SYSTEMD')
else
        conf.set('DEFAULT_HIERARCHY', 'CGROUP_UNIFIED_ALL')
endif

time_epoch = get_option('time-epoch')
if time_epoch == ''
        NEWS = files('NEWS')
        time_epoch = run_command(stat, '-c', '%Y', NEWS).stdout()
endif
time_epoch = time_epoch.to_int()
conf.set('TIME_EPOCH', time_epoch)

libacl = []
libblkid = []
libcryptsetup = []
libidn = []
libiptc = []
libseccomp = []
libselinux = []
libxz = []
liblz4 = []

conf.set10('HAVE_ACL', false)
conf.set10('HAVE_LIBCRYPTSETUP', false)
conf.set10('HAVE_SELINUX', false)
conf.set10('ENABLE_IDN', false)
conf.set10('ENABLE_SMACK', false)
conf.set10('ENABLE_POLKIT', false)
conf.set10('HAVE_PAM', false)
conf.set10('HAVE_APPARMOR', false)
conf.set10('ENABLE_IMA', false)
conf.set10('HAVE_SYSV_COMPAT', false)
conf.set10('ENABLE_UTMP', false)
conf.set10('HAVE_GNUTLS', false)
conf.set10('HAVE_ACL', false)
conf.set10('HAVE_XZ', false)
conf.set10('HAVE_LZ4', false)
conf.set10('HAVE_SECCOMP', false)
conf.set10('HAVE_BLKID', false)
conf.set10('HAVE_ELFUTILS', false)
conf.set10('HAVE_KMOD', false)
conf.set10('HAVE_LIBIDN2', false)
conf.set10('HAVE_LIBIDN', false)
conf.set10('HAVE_PCRE2', false)
conf.set10('HAVE_LIBIPTC', false)

config_h = configure_file(
        output : 'config.h',
        configuration : conf)

includes = include_directories('src/basic',
                               'src/shared',
                               'src/systemd',
                               'src/libsystemd/sd-bus',
                               'src/libsystemd/sd-id128',
                               '.')

add_project_arguments('-include', 'config.h', language : 'c')

subdir('src/systemd')
subdir('src/basic')
subdir('src/libsystemd')

libsystemd_sym_path = '@0@/@1@'.format(meson.current_source_dir(), libsystemd_sym)
libsystemd = shared_library(
        'systemd',
        'src/systemd/sd-id128.h', # pick a header file at random to work around old meson bug
        version : libsystemd_version,
        include_directories : includes,
        link_args : ['-shared',
                     '-Wl,--version-script=' + libsystemd_sym_path],
        link_with : [libbasic,
                     libbasic_gcrypt],
        link_whole : [libsystemd_static],
        dependencies : [threads,
                        librt],
        link_depends : libsystemd_sym,
        install : true,
        install_dir : rootlibdir)

############################################################

# binaries that have --help and are intended for use by humans,
# usually, but not always, installed in /bin.
public_programs = []

# TODO clean busctl from evil :>
exe = executable('busctl',
                 'src/shared/bus-util.c',
                 'src/shared/pager.c',
                 'src/busctl/busctl.c',
                 'src/busctl/busctl-introspect.c',
                 'src/busctl/busctl-introspect.h',
                 include_directories : includes,
                 install_rpath : rootlibexecdir,
                 link_with : [libbasic,
                             libsystemd_static],
                 dependencies : [threads],
                 install : true)
public_programs += [exe]

############################################################

meson_check_help = find_program('tools/meson-check-help.sh')

foreach exec : public_programs
        name = exec.full_path().split('/')[-1]
        test('check-help-' + name,
             meson_check_help,
             args : [exec.full_path()])
endforeach

############################################################

#generate_sym_test_py = find_program('src/test/generate-sym-test.py')

#test_libsystemd_sym_c = custom_target(
#        'test-libsystemd-sym.c',
#        input : [libsystemd_sym_path] + systemd_headers,
#        output : 'test-libsystemd-sym.c',
#        command : [generate_sym_test_py, libsystemd_sym_path] + systemd_headers,
#        capture : true)

#test_libsystemd_sym = executable(
#        'test-libsystemd-sym',
#        test_libsystemd_sym_c,
#        include_directories : includes,
#        link_with : [libsystemd],
#        install : install_tests,
#        install_dir : testsdir)
#test('test-libsystemd-sym',
#     test_libsystemd_sym)

############################################################

install_data('src/libsystemd/sd-bus/GVARIANT-SERIALIZATION',
             install_dir : docdir)

############################################################

status = [
        '@0@ @1@'.format(meson.project_name(), meson.project_version()),

        'split /usr:                        @0@'.format(split_usr),
        'split bin-sbin:                    @0@'.format(split_bin),
        'prefix directory:                  @0@'.format(prefixdir),
        'rootprefix directory:              @0@'.format(rootprefixdir),
        'sysconf directory:                 @0@'.format(sysconfdir),
        'include directory:                 @0@'.format(includedir),
        'lib directory:                     @0@'.format(libdir),
        'rootlib directory:                 @0@'.format(rootlibdir),
        'maximum system UID:                @0@'.format(system_uid_max),
        'maximum system GID:                @0@'.format(system_gid_max),
        'support URL:                       @0@'.format(support_url),
        'nobody user name:                  @0@'.format(nobody_user),
        'nobody group name:                 @0@'.format(nobody_group)]

# TODO:
# CFLAGS:   ${OUR_CFLAGS} ${CFLAGS}
# CPPFLAGS: ${OUR_CPPFLAGS} ${CPPFLAGS}
# LDFLAGS:  ${OUR_LDFLAGS} ${LDFLAGS}

found = []
missing = []

foreach tuple : [
        ['AUDIT'],
        ['gcrypt'],
]

        if tuple.length() >= 2
                cond = tuple[1]
        else
                ident1 = 'HAVE_' + tuple[0].underscorify().to_upper()
                ident2 = 'ENABLE_' + tuple[0].underscorify().to_upper()
                cond = conf.get(ident1, 0) == 1 or conf.get(ident2, 0) == 1
        endif
        if cond
                found += [tuple[0]]
        else
                missing += [tuple[0]]
        endif
endforeach

status += [
        '',
        'enabled features: @0@'.format(', '.join(found)),
        '',
        'disabled features: @0@'.format(', '.join(missing)),
        '']
message('\n         '.join(status))

if rootprefixdir != rootprefix_default
        message('WARNING:\n' +
                '        Note that the installation prefix was changed to "@0@".\n'.format(rootprefixdir) +
                '        systemd used fixed names for unit file directories and other paths, so anything\n' +
                '        except the default ("@0@") is strongly discouraged.'.format(rootprefix_default))
endif
